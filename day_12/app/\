module Main where

--import qualified Data.Map as Map

import Data.Maybe (catMaybes)

import Data.List.Split (splitOn)

import Control.Applicative (some)
import Control.Arrow ((&&&))

import Data.Map.Strict qualified as M
import Data.IntMap.Strict qualified as IM
import Data.Maybe (fromMaybe)

import Text.Regex.Applicative (RE, sym, string, psym, (=~))
import Text.Regex.Applicative.Common (decimal)



tst = ".###.##....#"

parse :: [Char] -> [[Char]]
parse [] = []
parse a = parsed : parse rest
  where
    (parsed, rest) = sameChars a

sameChars :: [Char] -> ([Char], [Char])
sameChars [] = ([], [])
sameChars [c] = ([c], [])
sameChars (c:cs)
  | c == c2 = (c : sc, rs)
  | otherwise = ([c], cs)
  where
    (sc, rs) = sameChars cs
    c2 = head cs

main :: IO()
main = do
  raw <- readFile "test.txt"
  let
    l = lines raw
    --x = map splitOn " " (head $ lines raw)
  print l
